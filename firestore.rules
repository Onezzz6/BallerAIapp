rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // XP System validation helper
    function validateXpUpdate() {
      return (
        // If no XP fields are being updated, validation passes
        (!('totalXp' in request.resource.data) && !('xpToday' in request.resource.data) && !('level' in request.resource.data) && !('lastXpReset' in request.resource.data)) ||
        (
          // totalXp can only stay the same or increase
          (!('totalXp' in request.resource.data) || request.resource.data.totalXp >= resource.data.totalXp) &&
          // xpToday can increase or reset to 0 (daily reset)
          (!('xpToday' in request.resource.data) || request.resource.data.xpToday >= 0) &&
          // xpToday cannot exceed 900 (daily cap)
          (!('xpToday' in request.resource.data) || request.resource.data.xpToday <= 900) &&
          // level must be consistent with totalXp (basic validation)
          (!('level' in request.resource.data) || request.resource.data.level >= 1) &&
          // lastXpReset can only move forward in time or stay the same
          (!('lastXpReset' in request.resource.data) || request.resource.data.lastXpReset >= resource.data.lastXpReset)
        )
      );
    }

    // Root-level collections
    match /meals/{mealId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null && request.query.limit <= 100;
    }

    // User profiles and personal data
    match /users/{userId} {
      allow read: if isSignedIn();
      allow delete: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Allow updates but protect subscription, referralCode, and XP fields
      allow update: if isOwner(userId) && 
        // Prevent clients from writing subscription field (webhook/admin only)
        (!('subscription' in request.resource.data) || 
         request.resource.data.subscription == resource.data.subscription) &&
        // Prevent clients from writing referralCode field after initial creation (webhook/admin only)
        // Note: To allow referral code changes before purchase, modify this rule to check if subscription is null
        (!('referralCode' in request.resource.data) || 
         request.resource.data.referralCode == resource.data.referralCode ||
         !('referralCode' in resource.data)) && // Allow setting referralCode if it doesn't exist yet
        // XP System validation rules
        validateXpUpdate();
      
      // Allow batch operations for all subcollections
      match /{collection}/{doc} {
        allow read, write, delete: if isOwner(userId);
      }

      // Allow recursive delete for all nested documents
      match /{document=**} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // User's training data
      match /trainings/{trainingId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // User's nutrition data
      match /nutrition/{nutritionId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // User's recovery data
      match /recovery/{recoveryId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // User's progress tracking
      match /progress/{progressId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // User's workout history
      match /workouts/{workoutId} {
        allow read, write, delete: if isOwner(userId);
      }

      match /dailyMacros/{date} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Public exercise database
    match /exercises/{exerciseId} {
      allow read: if isSignedIn();
      allow write: if false; // Admin only via backend
    }
    
    // Public nutrition database
    match /nutritionDb/{itemId} {
      allow read: if isSignedIn();
      allow write: if false; // Admin only via backend
    }
    
    // Referral codes - allow reading for validation
    match /referralCodes/{codeId} {
      allow read: if true; // Allow anyone to read referral codes for validation
      allow write: if false; // Admin only via backend
    }
    
    // Flagged messages - allow users to report inappropriate AI responses
    match /flaggedMessages/{messageId} {
      allow create: if isSignedIn() && 
        request.resource.data.reportedBy == request.auth.uid &&
        request.resource.data.userEmail == request.auth.token.email;
      allow read, update: if false; // Admin only via backend
      allow delete: if false; // Admin only via backend
    }
    
    // Teams functionality
    match /teams/{teamId} {
      function isTeamMember() {
        return isSignedIn() && (
          exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid))
        );
      }
      
      function isTeamCoach() {
        return isSignedIn() && resource.data.coachId == request.auth.uid;
      }
      
      allow read: if isSignedIn() && (isTeamMember() || isTeamCoach());
      allow create: if isSignedIn();
      allow update, delete: if isTeamCoach();
      
      // Team members subcollection
      match /members/{memberId} {
        allow read: if isSignedIn() && (isTeamMember() || isTeamCoach());
        allow write: if isTeamCoach();
      }
      
      // Team workouts
      match /workouts/{workoutId} {
        allow read: if isSignedIn() && (isTeamMember() || isTeamCoach());
        allow write: if isTeamCoach();
      }
    }
  }
} 